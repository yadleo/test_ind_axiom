from otree.api import (
    models,
    widgets,
    BaseConstants,
    BaseSubsession,
    BaseGroup,
    BasePlayer,
    Currency as c,
    currency_range,
)


author = 'Your name here'

doc = """
Your app description
"""

author = 'Cheng-Hsiao Cheng'

doc = """
Players need to maka 68 time of chooses between 2 lottories, both lotteries are a combanition of $10, $20, $30
and have a probablity distribution over these three rewards. The probability is in [0, 1]
"""
import random
from generator import sure_lottery, risky_lottery


class Constants(BaseConstants):

    name_in_url = 'test_ind_axiom'
    players_per_group = None
    num_rounds = 10

    mixing_propotion_lambda = [0.75, 0.50, 0.25]
    mixing_lottery_r = {

        "$10": "1",
        "$20": "0",
        "$30": "0",
    }

    risky_lottery_temp = risky_lottery(8, 8)  # generate risky_lottery's probablity
    sure_lottery_temp = sure_lottery()       # generate sure_lottery's porbability

    risky_lottery = []
    sure_lottery = []

    # generate lottery list contains all risky lottery descriptions
    for i in range(len(risky_lottery_temp)):
        risky_lottery_des = "$10 with probability %s, $20 with probability %s, and $30 with probability %s" % tuple(risky_lottery_temp[i])
        risky_lottery.append(risky_lottery_des)

    # generate lottery list contains all sure lottery description
    sure_lottery_des = "$10 with probability %s, $20 with probability %s, and $30 with probability %s" % tuple(sure_lottery_temp)
    sure_lottery.append(sure_lottery_des)


class Subsession(BaseSubsession):
    def creating_session(self):
        """
        keep in mind that creating_session get excuted for each round indepedently.

        """
        for participant in self.session.get_participants():
            lottery_pair = []

            for round_ques in range(1, Constants.num_rounds + 1):

                # this comment is for above for loop; this for loop decided how many lottery pairs we prepared for a round; num of questions must be enough for the num_rounds; For example, if we have five rounds, then we must have five lottery pairs
                lottery_dic = {}
                risky_lottery_sample = random.choice(Constants.risky_lottery)  # random sample without replacement
                sure_lottery_sample = random.choice(Constants.sure_lottery)
                lottery_dic["lottery_A"] = risky_lottery_sample
                lottery_dic["lottery_B"] = sure_lottery_sample
                lottery_pair.append(lottery_dic)

            participant.vars[participant] = lottery_pair


class Group(BaseGroup):
    pass


class Player(BasePlayer):
    lottery_picked = models.StringField(widget=widgets.RadioSelect)  # This is submitted the answer

    def current_lottery_pair(self):
        """
        return lottery pairs we store in participant.vars dictionary. The way we store the lottery pairs dictionary is we take participant ID as a key and for the corresponding values we use the list of lottery pair dictionary which generated by code above in the creating session part.
        """
        return self.participant.vars[self.participant][self.round_number - 1]

        # for testing purposes
        # print(self.participant, "!!!", self.participant.vars, "!!!", self.participant.vars[self.participant][0], "ggininder")
